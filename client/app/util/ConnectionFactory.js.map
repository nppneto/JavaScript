{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,kBAAMA,SAAS,CAAC,aAAD,CAAf;AACA,gBAAIC,aAAa,IAAjB;AACA,gBAAIC,QAAQ,IAAZ;;AAEO,kBAAMC,iBAAN,CAAwB;;AAE3BC,8BAAc;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;AAED,uBAAOC,aAAP,GAAuB;;AAEnB,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,4BAAIR,UAAJ,EAAgB,OAAOO,QAAQP,UAAR,CAAP;;AAEhB,8BAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,oCAAYG,eAAZ,GAA8BC,KAAK;;AAE/BX,8CAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AAEH,yBAJD;;AAMAP,oCAAYQ,SAAZ,GAAwBJ,KAAK;;AAEzBb,yCAAaa,EAAEE,MAAF,CAASC,MAAtB;;AAEAf,oCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;;AAEAA,uCAAWC,KAAX,GAAmB,MAAM;AACrB,sCAAM,IAAIG,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;;AAIAG,oCAAQM,EAAEE,MAAF,CAASC,MAAjB;AAEH,yBAZD;;AAcAP,oCAAYU,OAAZ,GAAsBN,KAAK;;AAEvBO,oCAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAd,mCAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAEH,yBALD;AAOH,qBAjCM,CAAP;AAkCH;;AAED,uBAAOT,aAAP,CAAqBd,UAArB,EAAiC;;AAE7BD,2BAAOyB,OAAP,CAAeC,SAAS;;AAEpB,4BAAIzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACIzB,WAAW4B,iBAAX,CAA6BH,KAA7B;;AAEJzB,mCAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,qBAND;AAOH;;AAED,uBAAOC,eAAP,GAAyB;;AAErB,wBAAI/B,UAAJ,EAAgB;AACZC;AACH;AACJ;AA7D0B","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n\r\n        throw new Error('Não é possível criar instâncias dessa classe');\r\n    }\r\n\r\n    static getConnection() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            if (connection) return resolve(connection);\r\n\r\n            const openRequest = indexedDB.open('jscangaceiro', 2);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n\r\n                ConnectionFactory._createStores(e.target.result);\r\n\r\n            };\r\n\r\n            openRequest.onsuccess = e => {\r\n\r\n                connection = e.target.result;\r\n\r\n                close = connection.close.bind(connection);\r\n\r\n                connection.close = () => {\r\n                    throw new Error('Você não pode fechar diretamente a conexão');\r\n                };\r\n\r\n                resolve(e.target.result);\r\n\r\n            };\r\n\r\n            openRequest.onerror = e => {\r\n\r\n                console.log(e.target.error)\r\n                reject(e.target.error.name)\r\n\r\n            };\r\n\r\n        });\r\n    }\r\n\r\n    static _createStores(connection) {\r\n\r\n        stores.forEach(store => {\r\n\r\n            if (connection.objectStoreNames.contains(store))\r\n                connection.deleteObjectStore(store);\r\n\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n        });\r\n    }\r\n\r\n    static closeConnection() {\r\n\r\n        if (connection) {\r\n            close();\r\n        }\r\n    }\r\n}"]}